# Dependencies and Setup
import pandas as pd

# File to Load (Remember to Change These)
school_data_to_load = "/Users/rogeralbarran/Desktop/PANDAS-CHALLENGE/pandas-challenge/PyCitySchools/02-Homework_04-Pandas_Instructions_PyCitySchools_Resources_schools_complete.csv"
student_data_to_load = "/Users/rogeralbarran/Desktop/PANDAS-CHALLENGE/pandas-challenge/PyCitySchools/02-Homework_04-Pandas_Instructions_PyCitySchools_Resources_students_complete.csv"

# Read School and Student Data File and store into Pandas Data Frames
school_data = pd.read_csv(school_data_to_load)
student_data = pd.read_csv(student_data_to_load)

# Combine the data into a single dataset
school_data_complete = pd.merge(student_data, school_data, how="left", on=["school_name", "school_name"])

# Calculate the total number of schools
total_school = len(school_data_complete['school_name'].unique())

# Calculate the total number of students
total_student = school_data_complete['student_name'].count()

# Calculate the total budget
total_budget = sum(school_data_complete['budget'].unique())

# Calculate the average math score
average_math_score = school_data_complete['math_score'].mean()

# Calculate the average reading score
average_reading_score = school_data_complete['reading_score'].mean()

# Calculate the overall passing rate
overall_passing_score = (average_math_score + average_reading_score)/2

# Calculate the percentage of students with a passing math score (70 or greater)
passing_math_score = (school_data_complete[school_data_complete['math_score']>=70]['student_name'].count()/total_student)*100

# Calculate the percentage of students with a passing reading score (70 or greater)
passing_reading_score = (school_data_complete[school_data_complete['reading_score']>=70]['student_name'].count()/total_student)*100

# Create a dataframe to hold the above results and formatting
district = {
    'Total Schools':total_school,
    'Total Student':'{:,}'.format(total_student),
    'Total Budget':'${:,.2f}'.format(total_budget),
    'Average Math Score':average_math_score,
    'Average Reading Score':average_reading_score,
    '% Passing Math':passing_math_score,
    '% Passing Reading':passing_reading_score,
    '% Overall Passing Rate':[overall_passing_score],  
}

district_summary = pd.DataFrame(district)
district_summary

#school summary
group_school = school_data_complete.groupby("school_name")

#school_type = group_school["type"].unique()
students = group_school["student_name"].count()

school_budget = group_school["budget"].mean()

school_type = [s_type[0] for s_type in group_school["type"].unique()]


pass_math_school = school_data_complete.loc[school_data_complete["math_score"] >= 70]
math_group = pass_math_school.groupby("school_name")


pass_reading_school = school_data_complete.loc[school_data_complete["reading_score"] >= 70]
reading_group = pass_reading_school.groupby("school_name")

school_summary_table = pd.DataFrame({"School Type": school_type,
                                    "Total Students": students,
                                    "Total School Budget": school_budget,
                                    "Per Student Budget": (group_school["budget"].mean())/(group_school["student_name"].count()),
                                    "Average Math Score": (group_school["math_score"].mean()),
                                    "Average Reading Score": (group_school["reading_score"].mean()),
                                    "% Passing Math": (math_group["student_name"].count())/(group_school["student_name"].count())*100,
                                    "% Passing Reading": (reading_group["student_name"].count())/(group_school["student_name"].count())*100,
                                    "% Overall Passing Rate": (reading_group["student_name"].count()+math_group["student_name"].count())/(2*group_school["student_name"].count())*100
                                    })

                                    
school_summary_table["Per Student Budget"] = school_summary_table["Per Student Budget"].astype(float).map("${:,.2f}".format)
school_summary_table["Total School Budget"] = school_summary_table["Total School Budget"].astype(float).map("${:,.2f}".format)                                   
                                   



best_schools = school_summary_table.sort_values(["% Overall Passing Rate"], ascending=False)
best_schools.reset_index(inplace=False)

best_schools.index.name = None
best_schools.head()

#List of bottom schools
worst_schools = school_summary_table.sort_values(["% Overall Passing Rate"], ascending=True)
worst_schools.reset_index(inplace=False)
worst_schools.index.name = None
worst_schools.head()
